- methods of generalization: as far as I know, I can see the following methods:
	First level: 
	- Design time:
		- Objectify: OOP inheritance and extention techniques
			- identifies basic core classes and extended ones
		- Low responsibilities Functions/Methods
		- Parameterize as much as it is convenient
	- Run time:
		- Chunck code in small pieces and compose them at runtime;
	Second Level: methods own there info
		- each method/function should supply parametrs list and types, with compulsory (without default) or optional attribute
			- technique 1: std method/func structure	
				- compulsory param array: $params
				- optional param [$mode]:
					- run: exec method code logic; this is the default
					- par: return a string with the structure of the $Params array: ex. SrvOp,anotherParam*
						[*]: optional param;
					- hlp: return a string with the complete html info on method/func
				- try...catch: capture all exceptions
					- switch($mode) ... case: 

	Third level: think about a CODE BUILDER after analysis, during desing time, before runtime.
	- Build Time: 
		- Build code chuncks with parameters;
			- parameters are:
				- data: app flow coming from requests and going to responses;
				- options: code chuncks have different implementation options according to requisites;
					- requisites specify logic and goals
					- language specific options: they are compulsory to obtain a certain logic or goal
- Best practices:
	- use arrays to pass parameters; minimize primitive params;
	- pass arrays as JSON Strings among system layers;
	- use implode/explode PHP tranformations to pass params as strings, into the same system layer;
	- use mapping and avoid loops to handle arrays;
	- use type string for elementary params >> cast only when you need to use a different type;
	- LOW PRIORITY: function should include a 
		- Help (-?): complete help TEXT [?HTML?]
		- Params Structure (-p): return params array structure of compulsory/optional params and defaults;
	- ...

LET apply this methods to ...
- about js>phpproxy>uiproxy>Daoctrl>Dao chain:
	- compulsory params check: Op + Compulsoryfields
		- responsibility: js + uiproxy + Daoctrl + Dao
			- new chain:  js 

	- on CompulsoryFields vs compulsoryParams
		- CompulsoryFields: array of HTML UI control names that must have a valid value
			- chain must be stopped in js client-side
			- think about html ui controls validation
		- CompulsoryParams: array of params for server side elaborations
			- chain must be stopped in the elaboration component: ex. Dao.ctrl?, UIProxy?, xxx.proxy? Dao?
				- deepest is Dao: it needs max available params
				- Dao.ctrl must select data Access
				- UiProxy must select operation
				- xxx.proxy: catch Post and return json
			- server side elaborations: select operation, select Data Access
		- example for Entity: ProfileFeatureAuth
	* $Params: {
	*  SrvOpParams = { array of Server Operation Params
	*     SrvOpNam: es.'Read'
	*     CompulsoryFields: string list of UI field names that must be set and must have a value != ''
	*     CompulsoryParamNams: string list of UI field names that must be passed for server ops,
	*     ParamNams: string list of all UI field names,
	*     SaveParamNams: string list of UI field names that must be passed for server save ops; they are data >> should be compulsory
	* },
	*  "data": array specific by entity and operation for ProfileFeatureAuth,
			CompulsoryFields: "IdProfile", >> for Save op
			CompulsoryParamNams = 
				"IdProfileFeatureAuth", >> for Read, Delete op
				"IdProfile", >> for Save op
				none >> for Tlist
            ParamNams: "SearchIds,IdProfile,IdFeature,IdAuthLevel", >> for ... op
			SaveParamNams = "IdProfileFeatureAuth,IdProfile,IdFeature,IdAuthLevel" >> for Save op
				- creating a Super-set:SearchIds,IdProfileFeatureAuth,IdProfile,IdFeature,IdAuthLevel
		- looking from another point of view: SrvOp: [*: compulsory]
			- Tlist, tree:
				- request: SearchIds,IdProfile [Select params]
				- response: T/F + Msg + Data[IdProfileFeatureAuth,IdProfile,ProfileNam,IdFeature,FeatureNam,IdAuthLevel,AuthLevelNam]
			- Read:
				- request: IdProfileFeatureAuth*
				- response: T/F + Msg + Data[IdProfileFeatureAuth,IdProfile,ProfileNam,IdFeature,FeatureNam,IdAuthLevel,AuthLevelNam]
			- Delete:
				- request: IdProfileFeatureAuth*
				- response: T/F + Msg
			- Save:
				- request: IdProfileFeatureAuth,IdProfile*,IdFeature*,IdAuthLevel* [db table fields]
				- response: T/F + Msg
					- insert: IdProfileFeatureAuth
					- update: none
	- Observations:
		- COMPULSORY ONLY for REQUESTS
			- COMPULSORY params depends strictly from REQUEST CONTEXT. the same param can be compulsory or not, for the same SrvOp.
			- NECESSARY PARAMS are important for Dao SrvOp, but could not overlap COMPULSORY ones.
			- OPTIONAL params cannot be delivered by the request.
		- ClientOps: they are related to ClientEvents like: btnTools, user interaction with ctrls (keyup, change)
			- each ClientOp can (not must) launch 1 or more SrvOps.
			ClientOps: 	BtnTools						| Other Events
						------------------------------------------------
						New, Save, Refresh, Delete, ...	| keyup	Change
			SrvOps:      - , Save, Read   , Delete, ...	|   -      -
						------------------------------------------------
		- ClientOps are part of Panel Params
		- a PANEL is defined by its parts:
			- Panel PARTS are ctrls or ctrl collections
			- ctrls are: containers (div heading-body-tech), inputs (various types: text, select, check), labels, buttons

		- SYSTEM is composed by: UI chain + ClientSrv Chain
			- UI CHAIN: ctrl > container > Panel > contents grid > Main Container > main grid
				- Main Grid: responsible for fundamental layout > parts: heading, sides, footer, content
				- Main Container: each part is into a container
				- contents grid; like a cells matrix.
					- each part could be splitted in sub-parts (ex. work area contents)
					- each grid part contains a Panel;
					- GridType: Horizontal, Vertical, 2DMatrix, ?3dMatrix?
						- Line: horizontal multi-panel layout
							- Layouts: cascading references
								- List > detail 
								- Cat > List > detail
								- FileList > FileView

					- each panel can be used in different ways called MODE: 
						- Alone: no parent panel; no children panels;
						- Tlist: Tlist Panel as parent > detail as child
						- Tree: Tree Panel as parent > Tlist or detail as child
						- FileList: FileTlist as parent > FileView/edit or detail as child
					- each Panel can have :
						- DetailPanels: "AlgRead", 
						- ParentObj: means that 1 other Panel is parent (Tlist,Tree,FileList); ex. "AlgCatTree", 
						- ParentObjType: "Tree", 
						- RefPanels: Children references: means that other(s) panel(s) has(ve) a reference to the Panel Entity Id/Nam; ex."AlgParamTypeTlist"
					+ This actual partition can be REFACTORED as follows:
						-------------------------------------------------------------------
							Mode			Has Parent	|	Has Child(ren)	|	Has Ref(s)
						-------------------------------------------------------------------
						- 	Alone: 				N		|	N 				|	YorN
						- 	Parent: 			Y 		|	N				|	YorN
						- 	Child: 				N  		|	Y				|	YorN
						- 	Parent-Child: 		Y  		|	Y				|	YorN
						-	Refs				YorN	|	YorN			|	Y
						-------------------------------------------------------------------
					+	This can be simplified considering eliminating Mode param,
						and considering the combination of 3 detailed Params: Parent, Children, Refs.
						This could be enough to build any cascading chain of relations among Panels.
					+	All possible combinations are: 8 = 2^3
					--------------------------------------------------------------------
						
---------------------------------------------------------------------------------------------------------------------------
Relation	| 	Source					->				Dest.						|	Source	->	Dest.	|
---------------------------------------------------------------------------------------------------------------------------
Params :	|	hasChild(ren)						|	hasParent					|	hasRef(s)			|	Virtual Mode
CurrentNam 	| 	DetailPanels	DetailPanelsType  	|	ParentObj	ParentObjType 	| 	RefPanels	InRefs	| 	Mode  				  		
NewNam		| 	"				DetailPanelTypes  	| 	ParPanel	ParPanelType 	| 	"			"		|	...		
Fun 		| 	Refresh[Clean]						|	Refresh						|	Set<FE>				|
Events		|	[Row] Click							|	Save,New,Delete				|	[Row] Click			|					
---------------------------------------------------------------------------------------------------------------------------
			|	N									|			N					|	N					|	Alone			
			|	N									|			N 					|	Y					|	Ref	
			|	Y									|			N  					|	N					|	Child		
			|	Y									|			N  					|	Y					|	Child-Ref
			|	N									|			Y  					|	N					|	Parent		
			|	N									|			Y  					|	Y					|	Parent-Ref
			|	Y									|			Y					|	N					|	Parent-Child		
			|	Y									|			Y					|	Y					|	Parent-Child-Ref		
---------------------------------------------------------------------------------------------------------------------------
						Of course: Parent can be only 0-1; Children and Refs can be 0-n;
					+ this new model solves the choise of the intermediate eleborations.
				- Panel: placed into a Grid part
					- each panel is defined at a GRANULARITY compatible with the following conditions:
						- 1 entity management; 
						- 1 set of ClientOps
						- 1 display mode (list table, field form, image/file viewer, button bar, menu bar, ...)

			- COMM CHAIN: UI evnt > JS-Jquery > POST-Json comm > PHP Proxy > Mng Component > Worker Component > End-point	
				- End-points: persistence, external service
				- Workers Components: Dao, Fs Helper, R-script
				- MngComponents: Dao.ctrl, Fs Mng, PHP-R integration mng, ...

		----------------	----------------	------------		--------------------------------------------------
		PanelType 	-->		ClientOps 	--> 	SrvOps 																													
			|					| 					|		
			V					V 					|		
		ToolBarType --> 	ButtonType  			|		
			|					| 					|		
			V					V 					V		
		PanelCtrls			JS btn Event ---	---------> 			Request Params 	-> 		Response Params		
		----------------	----------------	------------		--------------------------------------------------
		Tree				Refresh				Read				SearchIds				T/F + Msg + [UI Tree Cols]=[UI Tlist Cols] 	<-	[dbView[Entity] flds]
		----------------	----------------	------------		--------------------------------------------------
		Tlist				Refresh				Read				SearchIds				T/F + Msg + [UI Tlist Cols] 				<-	[dbView[Entity] flds]
							Order(Col)			---					---						---			
							Filter				---					---						---			
		----------------	----------------	------------		--------------------------------------------------
		FileTlist			Refresh				Read				PathFolderNam*			T/F + Msg + [UI FileTlist Cols]	
							Delete				Delete 				PathFileNam*			T/F + Msg 
							Clean				Clean 				PathFolderNam			T/F + Msg
							Upload				Upload				PathFileNam*,file*		T/F + Msg
							Order				---					---						---				
							Filter				---					---						---				
		----------------	----------------	------------		--------------------------------------------------
		Struct				Refresh				Read				Id[Entity]*				T/F + Msg + [UI panel Ctrls]				<-	[dbView[Entity] flds]
							Save				Save				[db[Entity] flds]		T/F + Msg + Id[Entity]	
		----------------	----------------	------------		--------------------------------------------------
		Read				Refresh				Read				Id[Entity]*				T/F + Msg + [UI panel Ctrls]				<-	[dbView[Entity] flds]
							Delete				Delete				Id[Entity]*				T/F + Msg 
							Save				Save				[db[Entity] flds]		T/F + Msg + Id[Entity]
							New					---					---						---			
		----------------	----------------	------------		--------------------------------------------------
		CatRead				Refresh				Read				Id[Entity]*				T/F + Msg + [UI panel Ctrls]				<-	[dbView[Entity] flds]
							Delete				Delete				Id[Entity]*				T/F + Msg 
							Save				Save				[db[Entity] flds]		T/F + Msg + Id[Entity]
							New					---					---						---			
							ChangeParent		---					---						---			
							NewChild			---					---						---			
		----------------	----------------	------------		--------------------------------------------------
		FileView			Refresh				Read				PathFileNam*			T/F + Msg + [UI panel Ctrls]				<-	[dbView[Entity] flds]
							Delete				Delete 				PathFileNam*			T/F + Msg 
		----------------	----------------	------------		--------------------------------------------------
		FileEdit			Refresh				Read				PathFileNam*			T/F + Msg + [UI panel Ctrls]				<-	[dbView[Entity] flds]
							Delete				Delete				PathFileNam*			T/F + Msg 
							Save				Save				PathFileNam*,[file]*	T/F + Msg 	
		----------------	----------------	------------		--------------------------------------------------
		[additional ops] 	[R-Script]Compute	[R-Script]Compute	[R-StdParams]			T/F + Msg + VerboseLog
							...
		----------------	----------------	------------		--------------------------------------------------
			- [R-Integration]: PhpR.proxy >> PhpR.Ctrl -> mainControl()
			- [R-StdParams]: ProcAbsPath; OutputAbsPath; ProcNam; ProcParams;

			- [dbView[Entity] flds]: structure of the DbView related to (PanelType & SrvOp & Entity)
			- [db[Entity] flds]: Structure of the Db[Entity] table(s) affected
			- [UI panel Ctrls]: array of ctrls

	- Relation among ...
		----------------------------------------------------------------------------------------------
		PanelType 	-->	PanelCtrls				<--	Structure Source
		----------------------------------------------------------------------------------------------
		Tree			daTree						dbView
		----------------------------------------------------------------------------------------------
		Tlist			daTable(DataTable)			dbView
		----------------------------------------------------------------------------------------------
		FileTlist		daTable(DataTable)			fsView
		----------------------------------------------------------------------------------------------
		Struct			daTable(DataTable)			csvView
		----------------------------------------------------------------------------------------------
		Read			daForm						dbView
		----------------------------------------------------------------------------------------------
		CatRead			daForm						dbView
		----------------------------------------------------------------------------------------------
		FileView		daFrame						---
		----------------------------------------------------------------------------------------------
		FileEdit		daEditor					---
		----------------------------------------------------------------------------------------------
	- Relation among ...
		---------------------------------------------------------------------------------------------------------------
		PanelType |	ParentObj	ParentObjType | DetailPanels	DetailPanelsType  | (Virtual)Mode 	  | RefPanels	InRefs
				  | ParPanels	ParPanelTypes | "				DetailPanelTypes  | 				  | 					
		---------------------------------------------------------------------------------------------------------------
		Tree	  | 	N			N		  | 	N				N			  | Alone			  | N		N
				  | 	N			N		  | 	N				N			  | Ref				  | Y		Y
				  | 	N			N		  | 	Y				Y			  | Child			  | 					
				  | 	N			N		  | 	N				N			  | Child-Ref		  | 					
				  | 	N			N		  | 	N				N			  | Parent			  | 					
				  | 	N			N		  | 	N				N			  | Parent-Ref		  | 					
				  | 	N			N		  | 	N				N			  | Parent-Child	  | 						
				  | 	N			N		  | 	N				N			  | Parent-Child-Ref  | 					
		---------------------------------------------------------------------------------------------------------------
		Tlist		
		---------------------------------------------------------------------------------------------------------------
		FileTlist	
		---------------------------------------------------------------------------------------------------------------
		Struct		
		---------------------------------------------------------------------------------------------------------------
		Read		
		---------------------------------------------------------------------------------------------------------------
		CatRead		
		---------------------------------------------------------------------------------------------------------------
		FileView	
		---------------------------------------------------------------------------------------------------------------
		FileEdit	
		---------------------------------------------------------------------------------------------------------------
	- DAO Standards: every DAO:
		- must be related to 1 Entity > Entity can be composed by simpler Entities
			- RDBMS: the Select From [Join] -> Entity(ies) + Descriptive Related other Entities
		- exposes DAOps: DAOps types are: select

		- DAOps standard: it depends on SourceType and [Entity] -> Result = [Entity].[DAOpsNam]([DAOpsParams])
			- DaoSourceType: RDBMS, FS, Component, ExtService
		------------	--------	------------					-----------		-----------------
		DAOps			RDBMS 								
						Op			OpType {2}							Result			FullNam
		------------	--------	------------					-----------		-----------------
		view			Select		Std		Single					0..1 row		selectSingle {1}
											All						0..n row(s)		selectAll
									Spec	Single[FilterParamNams]	0..1 row		selectSingle[FilterParamNams] {1}
											All[FilterParamNams]	0..n row(s)		selectAll[FilterParamNams]
		Save			Insert		{2}
						Update

		Delete			Delete		[Single]
						Clean		[Filter]
						Truncate	[All]

		[Spec]			[OpNam]		[OpNam][FilterParamNams]
		------------	--------	------------					-----------		-----------------
		{1}: Single could be omitted, but it stays for sintax disambiguation with select commands;
		{2}: think about generalization of Single/All+Filters ops -> only 1 Op Select[FilterParamNams] with 0..n row(s) result;
				ex: Profile: simple entity
					ProfileFeatureAuth: complex Entity
			See the 'Notes - RDBMS Ops Generalization.txt'

		------------	----------------	---------------------
		FS 				Component 			ExtService
		Op				OpType					
		------------	----------------	---------------------
		ReadFile
		DeleteFile
		CopyFile 
		RenameFile 
		SaveFile 

		FolderFiles
		CreateFolder
		RemoveFolder

	- It is important to study a standard of the relation among ...
		- std chain: client js > srv proxy > ctrl > Dao > <Service>
			- Dao: exposes methods and params for access request
			- Ctrl: must understant what method and params to call in Dao (see a Tlist with cathegory parent)
				- it must be standardized as much as possible, ex:
					- 			ExtService			[Method]			!empty([params])

		--------------------	----------------	----------------		------------------------------------------
		SrvOps 		--> 		Service		-->		Data Access Ops			Condition
		--------------------	----------------	----------------		------------------------------------------
		Read					RDBMS				selectSingle()			!empty(Id[Entity]) & NoN(Id[Entity])
													selectAll()				---					
													selectAll[Filters]()	!empty([Filters]) & {NoN([Filters]) | AoN([Filters])}
												   *select[Filters]()		[Filters] & {NoN([Filters]) | AoN([Filters])}
								FS					[url]					!empty([url])
								SrvComp				[getMethod(item)]		!empty([itemId])
		--------------------	----------------	----------------		------------------------------------------
		Delete					RDBMS			   *Delete					!empty(Id[Entity])
								FS					DeleteFile				!empty(PathFileNam)
								SrvComp				Delete[item]			!empty([itemId])
		--------------------	----------------	----------------		------------------------------------------
		Save					RDBMS				Insert					empty(Id[Entity])
													Update					!empty(Id[Entity])
												   *Save					[Id[Entity]]
								FS					SaveFile([file])		!empty(PathFileNam) & !empty(File)
								SrvComp				Save[item]				!empty([itemId]) & !empty(item)
		--------------------	----------------	----------------		------------------------------------------
		Clean					RDBMS			   *Truncate Table			!empty([Entity])
								FS					CleanFolder				!empty(PathFolderNam) & !empty(Folder)
								SrvComp				Clean[item]				!empty([itemId]) & !empty(item)
		--------------------	----------------	----------------		------------------------------------------
		Upload					RDBMS			   	---						---
								FS					SaveFile([file])		!empty(PathFileNam) & !empty(File)
								SrvComp				Save[item]				!empty([itemId]) & !empty(item)
		--------------------	----------------	----------------		------------------------------------------
		[R-Script]Compute		RDBMS			   	---						---
								FS					[inside RScript]		---
								SrvComp				RScript					!empty(RParams[itemId])
		--------------------	----------------	----------------		------------------------------------------

	- new model generalization: 
		? bit map table for request and response.
		- arrays of field nams
			- superset: T/F + Msg
									- 			SearchIds,IdProfileFeatureAuth,IdProfile,ProfileNam,IdFeature,FeatureNam,IdAuthLevel,AuthLevelNam
			- RequestParamsByOp:
				Tlist: [Select params]:				1
				Tree: [Select params]:				1
				Read: Id[Entity]*:								1*
				Delete: Id[Entity]*:							1*
				Save: [db table fields]:						1				1*						1*					1*
				...:
			- ResponseParamsByOp: T/F + Msg +
				Tlist: [UI table Fields]:		xN				1				1*			1			1*		1			1*			1
				Tree: [UI tree Fields]:			xN				1				1*			1			1*		1			1*			1
				Read: [UI panel Fields]:						1				1*			1			1*		1			1*			1
				Delete: none:
				Save: Id[Entity] || none :						1
				...:
/****************************************************************************************
/* final model for middle layers comments
/****************************************************************************************
		- (2 x n.SrvOp) sets -> but only 4 structures
			- Select params: 							SearchIds
			- Id[Entity]:								IdProfileFeatureAuth -> Id + [EntityNam]
			- db table fields:							IdProfileFeatureAuth,IdProfile,IdFeature,IdAuthLevel
			- db view > UI Fields [panel/table/tree]	IdProfileFeatureAuth,IdProfile,ProfileNam,IdFeature,FeatureNam,IdAuthLevel,AuthLevelNam
		- they are modulated according to:
			- SrvOp: Tlist,tree,read,delete,tree, ...
			- CommDirection: request, response
				- [*: compulsory] only for request
/**************************************************************************************
a new project for a CODE BUILDER in PHP.
This is because every sw system should have a code maintenance system associated.
No code building at run-time, or only in limited cases.
Criteria must be related to: parallel and independent blocks and operations.
But automatic code building according to your own standards is cost effective and very powerfull.

It means that it is necessary to define:
	- standard nam for persistences:
		- RDBMS: basic nams >> queries >> Tables, 	ex. IdProfileFeatureAuth,IdProfile,ProfileNam,IdFeature,FeatureNam,IdAuthLevel,AuthLevelNam
		- FS: basic nams >> from CSV, ...
	- standard Nam for UI:
		- NamSep: '_'
		- NamSpaceSep: '.'
		- ParentNamSpace: 'da'

		- Entity	: <Entity>													ex. Alg
		- UIPanelNam: <Entity><PanelType> 										ex. AlgRead
		- UICtrlNam	: <UIPanelNam> + sep + <fieldNam> 							ex. AlgRead_IdAlg
		- UIPanelJS	: <ParentNamSpace> + <NamSpaceSep> + <UIPanelNam>			ex. da.AlgRead

	- standard CODE CHUNCKS for 
		- CLIENT SIDE
			- layout: disposition of standardParts.ex. Adminlte
			- standardParts: headings, menubars, toolbars, sidebars, contents
			- navigation: structure of menus and bars
			- containers ex. main,  grids (contentType), panels (panelTypes),
			- panel contents:  ctrls (fields, tables, tree, editors, graphs, ...), 
				- fields: text, select, check (possibly avoid checks)
		- SERVER SIDE	
			- Proxy: AJAX-POST request array >> JSON response
			- OpCtrl: web of OpCtrls
			- Dao: persistence access
			- Persistence: RDBMS, FS
	- CLIENT PANEL parametrization: necessary to define UI composition standards:
		- Each UI Panel is divided in parts: 
			- Main: editable
			- TechInfo: readonly
		- Order is the listing one.
		- layout is:
			- parts: separator '|'
			- Rows: generally, 1 field per row: seperator ';'
			- fields in a row: seperator ','
			- fields params: separator '&'
        - Ids can be:
			- [P]ar e [R]ef: placed in the main part as readonly.
			- field: are placed in tech info part of the panel
            - select: (references) placed in the main part
        - others in the main part of the panel
        - input fields are only that of the main part
            - input can be: [t]ext (default), [s]elect, [c]heck
				- text could be: singleline <input>, multiline <textarea> 
	??? problem: the knowledge of EFs should be before the navigation
		- could be usefull to generate, once and for all, the all $FE, $FEFs, $DEs, $DEFs, $EFs
		- ex. array: ProfileFeatureAuth derived from ...
			$EFs = 'IdProfileFeatureAuth,IdProfile,IdFeature,IdAuthLevel,ProfileNam,FeatureNam,AuthLevelNam';
				main: [ProfileNam(ref);IdFeature(sel);IdAuthLevel(sel)],
				tech: [IdProfileFeatureAuth;IdProfile],
				ignored: FeatureNam,AuthLevelNam [cause of the select fileds in main]
		- translated array: it should be placed into the navigation data, at the panel level:
			[
				[ProfileNam&r;IdFeature&s;IdAuthLevel&s]|
				[IdProfileFeatureAuth;IdProfile]
			]
		- PANEL BUILDER: is a component needed to build the panel html and js.
		- ALTERNATIVE SOLUTION: identify fields, by convention, for:
				Panel part							Convention
				--------------------------------	-------------------------------------
				Main, 								default, not Tech fields		= UIMs = UIFTs + UIFCs + FSelIdss
					- Sels: dropdown, 				Ids + not FEId + not InRefs		= FSels)
					- Checks: booleans				bool, prefix 'bl' or 'is'		= UIFCs
					- Text: default 				all the others					= (UIFs - UIFCs - FSels) = UIFTs
						- InRefs > Nams: , 			readonly						= Ids(InRefs)
				Tech: Ids, ... 						Ids - Ids(FSels) +- ...			= UITs
						- Ids(InRefs): , 											= Ids(InRefs)
				Ignored: 							Nam(FSels) + ...,				= UIIs = EFs - UITs - UIMs
						- Nam(FSels)
				--------------------------------	-------------------------------------
			- field lists concepts examples:
			-----------------------------------------------------------
				PanelType: Tlist
				- ENTITIES
					FE     	: Profile
					DEs		:
					InRefs 	: 
					FSels  	: 
				- FIELDS	
					FEIdNam	: IdProfile
					FV     	: 
					FEFs   	: IdProfile,Nam,Descr
					DEFs   	: 
					EFs    	: IdProfile,Nam,Descr
					SetFs  	: IdProfile,Nam,Descr
					UIFs   	: Nam,Descr
			-----------------------------------------------------------
				PanelType: Read
				FE     : Profile
				FEIdNam: IdProfile
				InRefs : 
				FSels  : 
				FV     : 
				FEFs   : IdProfile,Nam,Descr
				DEFs   : 
				EFs    : IdProfile,Nam,Descr
				SetFs  : IdProfile,Nam,Descr
				UIFs   : Nam,Descr
			-----------------------------------------------------------
				PanelType: Tlist
				FE     : ProfileFeatureAuth
				FEIdNam: IdProfileFeatureAuth
				InRefs : Profile
				FSels  : 
				FV     : IdProfile
				FEFs   : IdProfileFeatureAuth,IdProfile,IdFeature,IdAuthLevel
				DEFs   : ProfileNam,FeatureNam,AuthLevelNam
				EFs    : IdProfileFeatureAuth,IdProfile,IdFeature,IdAuthLevel,ProfileNam,FeatureNam,AuthLevelNam
				SetFs  : IdProfileFeatureAuth,IdFeature,IdAuthLevel
				UIFs   : IdFeature,IdAuthLevel
			-----------------------------------------------------------
				PanelType: Read
				FE     : ProfileFeatureAuth
				FEIdNam: IdProfileFeatureAuth
				InRefs : Profile
				FSels  : Feature,AuthLevel
				FV     : 
				FEFs   : IdProfileFeatureAuth,IdProfile,IdFeature,IdAuthLevel
				DEFs   : ProfileNam,FeatureNam,AuthLevelNam
				EFs    : IdProfileFeatureAuth,IdProfile,IdFeature,IdAuthLevel,ProfileNam,FeatureNam,AuthLevelNam
				SetFs  : IdProfileFeatureAuth,IdFeature,IdAuthLevel
				UIFs   : IdFeature,IdAuthLevel
			-----------------------------------------------------------
		- Calc Sequence:
			INPUTS:
			- session: idPrfx, DescrPofx
			- PanelType: Tree, TList, Read, ...
			- [ParPanTypes]: ex. TList, Tree, ...
				- substitute ParentObjTypes
			- [ParPans]: substitute ParentObj
					ex. ProfileFeatureAuthRead	-> ProfileFeatureAuth(TList)  
						ProfileUsrRead 			-> ProfileUsr(TList) 
						ProfileRead 			-> Profile(TList) 	
			- [InRefEs]: substitute InRefs
				ex. Profile -> ProfileFeatureAuthTList,ProfileFeatureAuthRead,,ProfileUsrTList,ProfileUsrRead
			- FE:	from Navigation config
			- FEFs: from Knowledge

			CALCULUS:
			- FEId(FE) = idPrfx + FE
			- Ids(FEFs,FE) = FEId(FE) [+ DEIds]
				- [DEIds(FEFs,FE)]
				- [DEs(DEIds)]
				- [DEFs(DEs)] = [DEIds] [+ DENams(DEs)]
			- EFs(FEFs,DEFs) = FEFs [+ DENams(DEs)]
			- [InRefFs(DEFs,InRefEs)] = [InRefFsIds(DEIds,InRefEs)] [+ InRefFsNams(DENams,InRefEs)]
			- [FSelFs(Ids,FEId,[InRefFsIds])] = [FSelIds(Ids,FEId,[InRefFsIds])] + [FSelNams(FSelFs)]
				- [FSelIds(Ids,FEId,[InRefFsIds]) = Ids - FEId [- InRefFsIds]]
					- [FSelFs] = FSelIds - idPrfx
				- [FSelNams(FSelFs)]
			- SetFs = FEFs [- InRefFsIds]
			- UITs = Ids(FEFs,FE) - [FSelIds]
			- [UIFTs] = EFs - UITs - [UIFCs] - [FSelNams] = [InRefFsNams] + [OtherFTs]
				- [OtherFTs] = [UIFTs] - [InRefFsNams]
		???	- [UIFCs(FEFs)]
			- [UIMs] = [UIFTs] + [FSelIds] + [UIFCs] = [InRefFsNams] + [OtherFTs] + [FSelIds] + [UIFCs]
			- [UIIs] = EFs - UITs - [UIMs] = [FSelNams(FSels)] + [OIFs]
			- UIFs = [UIMs] + UITs

=============================================================================================================================
    - FM Filter Matrix 
		return json string
		this is specific for this Tlist panel of ProfileFeatureAuth
		Filters are dependent from References, Parent entities, specific settings for the panel.
		A FV (Filter vector) should be placed in the navigation data
		FV should be composed, once and for all, out of run time.
		FM is dependent from interaction data, so it canNOT be moved to the PHP content builder
		code chunk could be field by the php Content Builder
	- /*  SrvOpParams = { array of Server Operation Params
     *      SrvOpNam: es.'Read'                         : from Client request method
     *      FE; string // Fundamental Entity            : from navigation params
     *      FEFs; CS string// Fundamental Entity Fields : from getFEFs(FE) -> rdbms Struct array
     *      VM; JSON string// Values Matrix             : from Get(UIFields) <- UIFields=getUIFields(FEFs + )
     *      FM; JSON string// Filters Matrix (only Ids in this version)
     * },
        $VMArr = array(
            array("1",null ,3    ,"Clean" ,"Clean Algs"   ),
            array("2",1    ,1    ,"aaa"   ,"aaa Algs"     ),
            array("3",null ,null ,"bbb"   ,"bbb Algs"     ),
            array("4",4    ,4    ,"ccc"   ,"ccc Algs"     ),
            array("5",null ,4    ,"ddd"   ,"ddd Algs"     ),
            array("6",6    ,6    ,"eee"   ,"eee Algs"     ),
            array("7",null ,4    ,"fff"   ,"fff Algs"     )
        );

        $FMIdsArr =array("filterType" => 'NoN', "filterValues" => '1,6,16')
        // next version
        $FMArr = array(
            "fe.IdAlg"   => array("filterRel" => ''    , "filterType" => 'NoN', "filterValues" => '1,6,16'),
            "fe.Nam"     => array("filterRel" => 'AND' , "filterType" => 'AoN', "filterValues" => 'alg'),
            "fd.Dt"      => array("filterRel" => 'OR'  , "filterType" => 'NoN', "filterValues" => '2021-11-20'),
        );
	    */

=========================================================================================================================
- UIFs: it is the list used to build the editable part of the Read Panels.
	- it is necessary to define a standard naming convention, that can be enough to define the UI field type and parameters.
	ex.
	    <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    <label for="<?php echo $this->PanelTag; ?>Nam">Name</label>
                    <input type="text" class="form-control" id="<?php echo $this->PanelTag; ?>Nam"
                        placeholder="Name ..." value="">
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="form-group w-100">
                    <label for="<?php echo $this->PanelTag; ?>Descr">Description</label>
                    <textarea class="form-control" rows="3" id="<?php echo $this->PanelTag; ?>Descr"
                        placeholder="Description ..." value=""></textarea>
                </div>
            </div>
        </div>
- Parametrs could be:
	- sessions for postfixes ex. <entity>Nam [single line], <entity>Descr [multi line]
    - if rowStart -> <div class="row"></div>
    - if fieldWidth -> <div class="col-md-[fieldWidth]">
    - if readOnly -> <... value="" readonly>
	- if rowsNum -> <textarea class="form-control" rows="[rowsNum]"


IdFeature,IdAuthLevel, Nam, Descr








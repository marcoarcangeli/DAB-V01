
- DAO Standards: every DAO:
    - must be related to 1 Entity > Entity can be composed by simpler Entities
        - RDBMS: the Select From [Join] -> Entity(ies) + Descriptive Related other Entities
    - exposes DAOps: DAOps types are: select

    - DAOps standard: it depends on SourceType and [Entity] -> Result = [Entity].[DAOpsNam]([DAOpsParams])
        - DaoSourceType: RDBMS, FS, Component, ExtService
    ------------	--------	------------					-----------		-----------------
    DAOps			RDBMS 								
                    Op			OpType {2}							Result			FullNam
    ------------	--------	------------					-----------		-----------------
    view			Select		Std		Single					0..1 row		selectSingle {1}{4}
                                        All						0..n row(s)		selectAll
                                Spec	Single[FilterParamNams]	0..1 row		selectSingle[FilterParamNams] {1}
                                        All[FilterParamNams]	0..n row(s)		selectAll[FilterParamNams]
    Save			Insert		Std		One	{5}
                                        Multi {3}		
                    Update      Std		One	{5}
                                        Multi {3}

    Delete			Delete		[Single]
                    Clean		[Filter]
                    Truncate	[All]

    [Spec]			[OpNam]		[OpNam][FilterParamNams]
    ------------	--------	------------					-----------		-----------------
    {1}: Single could be omitted, but it stays for sintax disambiguation with select commands;
    {2}: think about generalization of Single/All+Filters ops -> only 1 Op Select[FilterParamNams] with 0..n row(s) result;
    {3}: MULTI could a more precise and general alternative to All.
    {4}: Single should be more precise as OneOrNone; All as MultiOrNone.
         It means that what is determining the = or like clause is the maximum number of rows returned.
    {5}: ONE could an alternative to Single.
----------------------------------------------------------
SELECT examples: 
----------------------------------------------------------
- Entity=Profile: simple entity
----------------------------------------------------------
selectAll()
 
            SELECT
                p.IdProfile,
                p.Nam,
                p.Descr
            FROM
                Profile p
            ORDER BY
                p.IdProfile
----------------------------------------------------------
selectSingle()
            SELECT
                p.IdProfile,
                p.Nam,
                p.Descr
            FROM
                Profile p
            WHERE
                IdProfile = " . $this->IdProfile."
----------------------------------------------------------
Generalization hypothesis:
selectIdProfile()
            SELECT
                p.IdProfile,
                p.Nam,
                p.Descr
            FROM
                Profile p
            WHERE
                IdProfile like '" . $this->IdProfile."%'
            ORDER BY
                p.IdProfile
----------------------------------------------------------
OBSERVATONS:
- to generalize js->Refresh and Dao.ctrl->DbRead methods must not execute Dao if emptyOrNull(IdProfile)
----------------------------------------------------------
-this must be placed in the ProfileFeatureAuth Dao

selectAllFeatureAuth() 
                SELECT
                    p.IdProfile,
                    p.Nam,
                    p.Descr,
                    fc.IdFeatureCat,
                    fc.Nam as FeatureCatNam,
                    f.IdFeature,
                    f.Nam as FeatureNam,
                    f.Descr as FeatureDescr,
                    f.CodeParams as FeatureCodeParams,
                    a.IdAuthLevel,
                    a.Nam as AuthLevelNam,
                    a.AuthLevel as AuthLevel
                FROM
                    Profile p
                    LEFT OUTER JOIN profile_feature_auth pfa on pfa.IdProfile=p.IdProfile
                    LEFT OUTER JOIN feature f on pfa.IdFeature=f.IdFeature    
                    LEFT OUTER JOIN authLevel a on pfa.IdAuthLevel=a.IdAuthLevel    
                    LEFT OUTER JOIN featureCat fc on f.IdFeatureCat=fc.IdFeatureCat    
                WHERE
                    p.IdProfile = " . $this->IdProfile."
                ORDER BY
                    fc.Nam, f.Nam
----------------------------------------------------------
-this must be placed in the ProfileFeatureAuth Dao

selectAllUsrProfileFeatureAuth()
                SELECT
                    u.IdUsr,
                    u.usrNam,
                    count(p.IdProfile),
                    fc.IdFeatureCat,
                    fc.Nam as FeatureCatNam,
                    f.IdFeature,
                    f.Nam as FeatureNam,
                    f.Descr as FeatureDescr,
                    f.CodeParams as FeatureCodeParams,
                    a.IdAuthLevel,
                    a.Nam as AuthLevelNam,
                    max(a.AuthLevel) as AuthLevel
                FROM
                    usr u
                    LEFT OUTER JOIN profile_usr pu on pu.IdUsr=u.IdUsr
                    LEFT OUTER JOIN Profile p on pu.IdProfile=p.IdProfile
                    LEFT OUTER JOIN profile_feature_auth pfa on pfa.IdProfile=p.IdProfile
                    LEFT OUTER JOIN feature f on pfa.IdFeature=f.IdFeature    
                    LEFT OUTER JOIN authLevel a on pfa.IdAuthLevel=a.IdAuthLevel    
                    LEFT OUTER JOIN featureCat fc on f.IdFeatureCat=fc.IdFeatureCat    
                GROUP BY
                    u.IdUsr,
                    fc.IdFeatureCat,
                    f.IdFeature
                HAVING
                    u.IdUsr = " . $this->IdUsr."
                ORDER BY
                    fc.IdFeatureCat,
                    f.IdFeature
----------------------------------------------------------
- this must be placed in the ProfileUsr Dao

selectAllUsrProfile() >> Nam must be: Profile->selectAllIdUsr()

                SELECT
                    u.IdUsr,
                    u.usrNam,
                    p.IdProfile,
                    p.Nam,
                    p.Descr
                FROM
                    usr u
                    LEFT OUTER JOIN profile_usr pu on pu.IdUsr=u.IdUsr
                    LEFT OUTER JOIN Profile p on pu.IdProfile=p.IdProfile
                WHERE
                    u.IdUsr = " . $this->IdUsr."
                ORDER BY
                    p.Nam

- ProfileFeatureAuth: complex Entity


-------------------------------------------------
OBSERVATIONS:
- it is quiet impossible to define a generalized standard for DAO Requests,
  cause they are so variuos.
- As far as I know, It can be done only for basic Select Single-All, Insert, Update, Delete.
- Other requests cannot be limited by a rigid standard:
	- Filters: they affect the OpNam;
	- composed entities: they affect the EntityNam;

- The only way I can see is to define a standard that consider a Composed Entity as a 
  new and different entity from the composing ones.
  ex. Profile, Feature, AuthLevel, Usr are different from any combynation of them: 
	- ProfileFeature, ProfileFeatureAuthLevel, ProfileUsr
? It seems that the order could be ignored: ex. ProfileUsr and UsrProfile can coexist in the same Dao.
    - lets demonstrate it for ProfileUsr <> UsrProfile
-------------------------------------------------
selectAll()
            SELECT
                pu.IdProfileUsr,
                pu.IdProfile,
                p.Nam as ProfileNam,
                pu.IdUsr,
                u.UsrNam
            FROM
                profile_usr pu
                LEFT OUTER JOIN profile p on pu.IdProfile=p.IdProfile
                LEFT OUTER JOIN usr u on pu.IdUsr=u.IdUsr    
            ORDER BY
                p.Nam,u.Nam
-------------------------------------------------
selectSingle()
            SELECT
                pu.IdProfileUsr,
                pu.IdProfile,
                p.Nam as ProfileNam,
                pu.IdUsr,
                u.UsrNam
            FROM
                profile_usr pu
                LEFT OUTER JOIN profile p on pu.IdProfile=p.IdProfile
                LEFT OUTER JOIN usr u on pu.IdUsr=u.IdUsr   
            WHERE
                pu.IdProfileUsr = " . $this->IdProfileUsr." 
-------------------------------------------------
OBSERVATIONS:
- general std select model:
    SELECT
        [StdViewFields] 
    FROM
        [Entity]
    WHERE
        [Filter] 
    ORDER BY
        [OrderingFields]

- [StdViewFields] are defined by: 
    - All Foundamental entity fields (ex. pu.IdProfileUsr, pu.IdProfile, pu.IdUsr)
     +  
    - Descriptive Entities fields related to Foreingn keys Ids (ex. p.Nam as ProfileNam, u.UsrNam)
- [Entity] is always the same (look at the From Clause)
    ex: ... 
    profile_usr pu
    LEFT OUTER JOIN profile p on pu.IdProfile=p.IdProfile
    LEFT OUTER JOIN usr u on pu.IdUsr=u.IdUsr   
    ...
    generaliazed: ... 
    [fundamental Entity] fe
    LEFT OUTER JOIN [descriptive entity 1] de1 on fe.[Id[fundamental Entity]]=de1.[Id[descriptive entity 1]]
    LEFT OUTER JOIN [descriptive entity 2] de2 on fe.[Id[fundamental Entity]]=de2.[Id[descriptive entity 2]]   
    ...
    - where - profile_usr is the fundamental entity
            - profile, usr entities become descriptive.
- [Filter] WHERE or HAVING conditions, are the most complex part to generalize
    It can be done adding Filter Types when necessary. For ex. :
    Filter Type: 
        NoN: None on Null       > '=' (Single or Multiple Values);  Precise match
        AoN: All on Null        > 'LIKE %' (Single Value);           Partial match
        Min: Minimum            > >= (Single Value);
        Max: Maximum            > <= (Single Value);
        Rng: Range              > BETWEEN min an max (Multiple Values);
     Type modificators:    
        -: exclude              > NOT
        C(dt): Cast as Datatype > CAST($var AS $dt)
    ******************
     examples
     -NoN; -AoN;0
     
- [Ordering fields] a std could be:
    - Descriptive 'Nam' Fields, if they exist
    or
    - Foundamental Entity Id, if not

- The IdProfileUsr = IdUsrProfile and is unique;

- Generalizations should be:
-------------------------------------------------
    Std generalization

...    WHERE
        pu.IdProfileUsr like '" . $this->IdProfileUsr."%' 
...
-------------------------------------------------
    Relational generalizations

selectAllIdProfileIdUsr()   
...    WHERE
        pu.IdProfile like '" . $this->IdProfile."%' and
        pu.IdUsr like '" . $this->IdUsr."%'
...
-------------------------------------------------
selectAllIdProfile()    
...    WHERE
        pu.IdProfile = " . $this->IdProfile." 
...
-------------------------------------------------
selectAllIdUsr()
...    WHERE
        pu.IdUsr = " . $this->IdUsr." 
...
-------------------------------------------------
selectAllIdProfileIdUsrEx()   
...    WHERE
        pu.IdProfile = " . $this->IdProfile." XOR
        pu.IdUsr = " . $this->IdUsr."
...
-----------------------------------------------------

-----------------------------------------------------
CONCLUSIONS for SELECT
- a Dao component must be considered as a wrapper encapsulating a dataSourse Entity (ex. rdbms table or join of tables);
- a std adapter Dao can be defined setting up, with STD COMPOSITION RULES (see the hypothesis above):
    - Entity, Fields, Ordering fields, Filters 
- STD COMPOSITION RULES can be introduced in order to have multiple options for Code composition.
- a Code Builder should include a Composition Rule Editor.

-----------------------------------------------------
OTHER OBSERVATIONS
? A greater problem is the reverse engineering of the Entity, starting from the Sql From clause
    ? could be done with the Analyst interaction selecting fundamental and description assets

----------------------------------------------------------
----------------------------------------------------------
SELECT CUSTOM VIEWS
----------------------------------------------------------
- a CUSTOM VIEW is composed by a whatever field, coming from any table or other view.
    - starting ex.
    ex. PrjStateCalcSingle
            SELECT
                p.IdPrj,
                p.IdUsr,
                p.Nam,
                p.Descr,
                p.FolderRef,
                p.IdPrjState,
                sp.Nam as PrjStateNam,
                e.IdEvnt,
                e.fileRefRepoDat,
                cl.IdClean,
                c.IdCntx,
                MIN(a.IdAn) AS IdAn,
                COUNT(a.IdAn) AS AnNum,
                rn.IdRnk,
                (not isnull(p.IdPrj)) + 
                (not isnull(e.IdEvnt)) +
                (not isnull(cl.IdClean)) +
                (not isnull(c.IdCntx)) +
                (not isnull(a.IdAn)) +
                (not isnull(rn.IdRnk))
                as IdPrjStateCalc
            FROM
                Prj p
                LEFT JOIN PrjState   sp  ON p.IdPrjState = sp.IdPrjState
                LEFT JOIN evnt       e   ON p.IdPrj      = e.IdPrj
                LEFT JOIN cntx       c   ON p.IdPrj      = c.IdPrj
                LEFT JOIN clean      cl  ON p.IdPrj      = cl.IdPrj
                LEFT JOIN an         a   ON p.IdPrj      = a.IdPrj
                LEFT JOIN rnk        rn  ON a.IdPrj      = rn.IdPrj
            WHERE
                p.IdPrj = " . $this->IdPrj."
            GROUP BY
                p.IdPrj

- Fields could be calculated or composed fields
- it is necessary to build custom SQL code and include it into the DAO (if it is defined)
- or it should be condesed in a meta Sql language in which:
    - it is distinguished: 
        - ENTITY: From clause param, as a join of tables/views, 
            - ex.
                Prj p
                LEFT JOIN PrjState   sp  ON p.IdPrjState = sp.IdPrjState
                LEFT JOIN evnt       e   ON p.IdPrj      = e.IdPrj
                LEFT JOIN cntx       c   ON p.IdPrj      = c.IdPrj
                LEFT JOIN clean      cl  ON p.IdPrj      = cl.IdPrj
                LEFT JOIN an         a   ON p.IdPrj      = a.IdPrj
                LEFT JOIN rnk        rn  ON a.IdPrj      = rn.IdPrj
            - condensed syntax: <FE>  <JEj>;L;Id<JEj> ... <JEj>;L;Id<FE> ... <JEj>;L;Id<JEi>
            - sample decomposed
                <FE>            <FE>            
                <JE1>;L;<fn1>   <JE1>;L;Id<JE1> 
                <JE2>;L;<fn2>   <JE2>;L;Id<FE>  
                <JE3>;L;<fn3>   <JE3>;L;Id<FE>  
                <JE4>;L;<fn4>   <JE4>;L;Id<FE>  
                <JE5>;L;<fn5>   <JE5>;L;Id<FE>  
                <JE6>;L;<fn6>   <JE6>;L;Id<JE5> 
            - where
                - join types: they should be declined in a more friendly way, during modelling fase
                    [I]nner: values existing in both entities
                    [C]ross or (, sep): cartesian product of values; any combination of values of both entities 
                    [L]eft: all the first entity values and the second entity values only if they exists
                    [R]ight: all the second entity values and the first entity values only if they exists
                - inner entities (T/V):
                <FE>:  Prj
                <JE1>: PrjState
                <JE2>: Evnt    
                <JE3>: Cntx    
                <JE4>: Clean   
                <JE5>: An      
                <JE6>: Rnk     
            - Entity Condesed code could be: 
                "Prj PrjState;L;IdPrjState Evnt;L;IdPrj Cntx;L;IdPrj Clean;L;IdPrj An;L;IdPrj Rnk;L;IdAn"
        - FIELDS LIST: each field can be  
            - simple: <t/v>.<fn>
            - simple duplicated: <t/v>.<fn> as <t/v><fn>,
            - computed: <expression> as <fn>
                - <expression>: ex. 
                    (not isnull(p.IdPrj)) + 
                    (not isnull(e.IdEvnt)) +
                    (not isnull(cl.IdClean)) +
                    (not isnull(c.IdCntx)) +
                    (not isnull(a.IdAn)) +
                    (not isnull(rn.IdRnk)) 
            - ex.
                Prj.IdPrj,
                Prj.IdUsr,
                Prj.Nam,
                Prj.Descr,
                Prj.FolderRef,
                Prj.IdPrjState,
                PrjState.Nam as PrjStateNam,
                Evnt.IdEvnt,
                Evnt.fileRefRepoDat,
                Clean.IdClean,
                Cntx.IdCntx,
                MIN(An.IdAn) AS IdAn,
                COUNT(An.IdAn) AS AnNum,
                Rnk.IdRnk,
                (not isnull(Prj.IdPrj)) + 
                (not isnull(Evnt.IdEvnt)) +
                (not isnull(Clean.IdClean)) +
                (not isnull(Cntx.IdCntx)) +
                (not isnull(An.IdAn)) +
                (not isnull(Rnk.IdRnk))
                as IdPrjStateCalc    
            - Syntax: 
                - simple: <FE>.<fni> <JEj>.<fni>
                - simple duplicated: <JEj>.<fni>
                    - it can be only  a JE (not a field of the FE)
                    - the <fni>(<JEj>) == <fni>(<FE>): 
                        - ex. PrjState.Nam as PrjStateNam
                            "Nam"(PrjState) == "Nam"(Prj)
                - computed: must be written in a pseudo-code:
                    - ex: 
                        "Prj.IdPrj Evnt.IdEvnt:+ Clean.IdClean:+ Cntx.IdCntx:+ An.IdAn:+ Rnk.IdRnk:+"
                        "An.IdAn;MIN"
                        "An.IdAn;COUNT"
                    - not isnull(...): it is a technical addiction to secure code from basic unusefull errors
- COMPLETE CUSTOM VIEW string could be:
[
    {
        "VNam": "PrjStateCalcSingle",
        "Entity": "Prj PrjState;L;IdPrjState Evnt;L;IdPrj Cntx;L;IdPrj Clean;L;IdPrj An;L;IdPrj Rnk;L;IdAn"
        "CSCols": "Prj.IdPrj,Prj.IdUsr,Prj.Nam,Prj.Descr,Prj.FolderRef,Prj.IdPrjState,
                   PrjState.Nam,Evnt.IdEvnt,Evnt.fileRefRepoDat,Clean.IdClean,Cntx.IdCntx,
                   An.IdAn;MIN,An.IdAn;COUNT,IdPrjStateCalc;Prj.IdPrj Evnt.IdEvnt:+ Clean.IdClean:+ Cntx.IdCntx:+ An.IdAn:+ Rnk.IdRnk:+"
    },
...
]
- so the basic sql builder in the DAO must be sophisticated in order to evolve the functions:
    - getEFsSql($FE, $DEs, $FEFs, $DEFs)
    - getEntitySql($FE, $DEs)
    - Filters are managed distinguishing between WHERE and HAVING clauses.
        - WHERE in the inner select, before the grouping, IS MORE EFFICIENT.
- in this case (Prj), the standard SrvOpParams are that ones of the Prj entity:
    "FE"        : "Prj", 
    "FEFs"      : "IdPrj,IdUsr,Nam,Descr,folderRef,IdPrjState",
    "DEs"       : "Usr,PrjState",
    "DEFs"      : "UsrNam,PrjStateNam",  
    "EFs"       : "IdPrj,IdUsr,Nam,Descr,folderRef,IdPrjState,UsrNam,PrjStateNam",  
    "FM"        : da.PrjTlist.GetFMJson(), 
    "SetFs"     : "IdPrj,IdUsr,Nam,Descr,folderRef,IdPrjState"
    "UIFs"      : "IdUsr,Nam,Descr,folderRef,IdPrjState"
    - OBSERVATIONS:
    - FIRST OPTION: FULL
        - a MATHS META LANGUAGE (MML) must be developped in order to define expressions in a language independent way
        - MML must be 
            - as simple and similary to the common expression definition 
            - not limited by specific language capabilities 
            - case insensitive
        - IdUsr, UsrNam comes from the session; they are like a constant for the FE entity in the run-time UI;
            - should be defined a standard to assign session values: ex. fromSession, toSession navigation params
            - should be placed in the TECH INFO; 
            - they are not an FSel;
            - <JEj> should be included into the the Fields list with ID and Nam (if available )
        - Prj,PrjState and Usr entities are included by defualt with their id and nam fields
        - the FE entity is included by default with all its fields
        - JOIN defaults: syntax <ENami>[;<JoinType>][;<FENami>]
            - le LEFT JOIN could be defined as a default
            - the FEId could be defines as a default for join
        - parentesis ()[]{}, functions/operators (like min, max, +, / ) can be placed as single char with a leading and a following sophisticated
        - GROUP BY clause is position dependent, so it could be set as a number defining the GFs according to the EFs order 
            - ex.   GFs:"1" -> Prj.IdPrj 
            - ex.   GFs:"2" -> Usr.IdUsr 
            - ex.   GFs:"1,2" -> Prj.IdPrj,Usr.IdUsr
            - ex.   GFs:"2,1" -> Usr.IdUsr,Prj.IdPrj
                and so on.
    - SO
        - the CUSTOM VIEW could be simplified including only the additional information needed:
        [
            {
                "VNam":   "PrjStateCalcSingle",
                "VEs": "Evnt,Cntx,Clean,An,Rnk;IdAn"                                                             //<JEj>
                "CSCols": "Evnt.fileRefRepoDat,                                                                     // additional specific fields
                           IdAn=MIN&An.IdAn,IdAn=COUNT&An.IdAn,                                                     // computed fields
                           IdPrjStateCalc=( !isnull&Prj.IdPrj + !isnull&Evnt.IdEvnt + !isnull&Clean.IdClean + 
                                            !isnull&Cntx.IdCntx + !isnull&An.IdAn + !isnull&Rnk.IdRnk )"
                "GroupBy":"1"
            },
        ...
        ]
        - completed params
        [
            {
                "VNam":   "PrjStateCalcSingle",
                "VEs": "Prj,Usr,PrjState,Evnt,Cntx,Clean,An,Rnk;IdAn"
                "CSCols": "IdPrj,IdUsr,Nam,Descr,folderRef,IdPrjState,UsrNam,PrjStateNam,                           // all the EFs
                           IdEvnt,EvntNam,IdCntx,CntxNam,IdClean,CleanNam,IdAn,AnNam,IdRnk,RnkNam                   // all ids and DEs of <JEj>
                           Evnt.fileRefRepoDat,                                                                     // SFs: additional specific fields
                           IdAn=MIN&An.IdAn,AnNum=COUNT&An.IdAn,                                                    // CFs: computed fields
                           IdPrjStateCalc=( !isnull&Prj.IdPrj + !isnull&Evnt.IdEvnt + !isnull&Clean.IdClean + 
                                            !isnull&Cntx.IdCntx + !isnull&An.IdAn + !isnull&Rnk.IdRnk )"
                "GroupBy":"1"
            },
        ...
        ]
    - SECOND OPTION: SIMPLIFIED
        - the same for VNam and Entity params
        - the same for EFs and all ids and DEs of <JEj> and additional specific fields
        - computed fields could be marked by the language used: 
            ex  SQL:MIN(An.IdAn) AS IdAn
                PHP:IdAn=min(IdAnArr);
        - Advantages: no language expert needed, immediate if the language is the one that is needed
            - usually code is defined with a specific responsibility, so it should be easier and efficient to define language specific params ?
        - Disadvantages: changing language need redundancy; 
    - THIRD OPTION: ALLOW TO INCLUDE A LANGUAGE SPECIFIC SCRIPT: Ex. a navigation param - SQLScript:PrjStateCalcSingle.sql
        - it could be parameterized on filters (WHERE clause)
    - LAST OPTION: ALLOW ALL OPTIONS
    - FINAL OBSERVATIONS: 
        - if the objective is not to write always the same code, the FIRST option is what I need:
        It allows to elevate the information about the access to a part of the knowledge and it delegates the technical
        code definition to a language specific code builder.
        - if the objective is to limit the complexity of the code building the SECOND and the THIRD options are to be considered, 
        in that increasing order of simplification.
        - THIRD option could be considered as a last chance for cases that do not match the previous ones.
        - The SECOND option is the best mean point, because 
            - it doesn't need to develop a new meta language to map all the SQL functions and operators.
            - single expressions can be tested in the language specific SDE.
            - it should be good if entity could be implied starting from the field name.
        - Language specification could be not necessary, considering that this is a RDBMS specific DAO layer and 
            SQL is almost compulsory at this level.
            But could be used any other DAO layer to access RDBMS.
        - This could be a generalized approach to the variety integration: COMMUNICATE, DO NOT RE-MAP.
    - BEST OPTION: as far as I know
        - the CUSTOM VIEW STRUCTURE could be simplified including 
            - only the additional information needed
            - the SQL expression code 
        [
            {
                "VNam":   "PrjStateCalcSingle",
                "VEs":    "Evnt,Cntx,Clean,An,Rnk;IdAn",                                                             // VEs: View Entities; <JEj>
                "VFs":    "Evnt.fileRefRepoDat,                                                                     // additional specific fields
                           MIN(An.IdAn) AS IdAn,COUNT(An.IdAn) AS AnNum,                                           // CFs: computed fields
                           (not isnull(p.IdPrj))+(not isnull(e.IdEvnt))+(not isnull(cl.IdClean))+
                           (not isnull(c.IdCntx))+(not isnull(a.IdAn))+(not isnull(rn.IdRnk))
                           as IdPrjStateCalc",
                "GroupBy":"Prj.IdPrj"
            },
        ...
        ]
    - the complete SrvOpParams can be:
        "FE"        : "Prj", 
        "FEFs"      : "IdPrj,IdUsr,IdPrjState,Nam,Descr,folderRef",
        "DEs"       : "Usr,PrjState,Evnt,Cntx,Clean,An,Rnk",
        "DEFs"      : "UsrNam,PrjStateNam,EvntNam,CntxNam,CleanNam,AnNam,RnkNam",  
        "EFs"       : "IdPrj,IdUsr,IdPrjState,Nam,Descr,folderRef,UsrNam,PrjStateNam,              // EFs=FEFs(FE)+DEFs+VEFs+VFs where VFs=SFs+CFs
                       IdEvnt,IdCntx,IdClean,{IdAn},IdRnk,EvntNam,CntxNam,CleanNam,AnNam,RnkNam      // all ids and DEs of <JEj>
                       Evnt.fileRefRepoDat,                                                        // SFs: additional specific fields [<Ei>.<Fj>, ...]
                       MIN(An.IdAn) AS IdAn,COUNT(An.IdAn) AS AnNum,                                // CFs: computed fields
                       (not isnull(Prj.IdPrj))+(not isnull(Evnt.IdEvnt))+(not isnull(Clean.IdClean))+
                       (not isnull(Cntx.IdCntx))+(not isnull(An.IdAn))+(not isnull(Rnk.IdRnk))
                       as IdPrjStateCalc",  
        "FM"        : da.PrjTlist.GetFMJson(), 
        "SetFs"     : "IdPrj,IdUsr,IdPrjState,Nam,Descr,folderRef"
        "UIFs"      : "IdUsr,IdPrjState,Nam,Descr,folderRef"
        "GFs"       : "Prj.IdPrj"                                                                           // GFs: Group Fields
        "Entity"    : "Prj,Usr,PrjState,Evnt,Cntx,Clean,An,Rnk;IdAn"                                // Entity=FE+DEs+VEs  
    - EFs=FEFs(FE)+DEFs+VEFs+VFs 
        - VFs=SFs+CFs
            - check if it substitute  
        - VEFs= IDs(VEs)+DEFs(VEs)
    - DEFAULT Fields order

----------------------------------------------------------
INSERT and UPDATE examples: 
----------------------------------------------------------
    Save			Insert		Std		One	
                                        Multi 		
                    Update      Std		One	
                                        Multi 

OBSERVATIONS:
- Insted of passing single row syntax of the INSERT,
  One, Multi can be generalized considering passing a commun Matrix to the Insert method:
    - One: passing a one row Matrix
    - Multi: passing a multiple rows Matrix

Single row syntax
    INSERT INTO  Profile
            (Nam,Descr)
    VALUES
        (" . VN($this->Nam)     . ",
         " . VN($this->Descr)   . "
        )"
    ;

Multi rows syntax
    INSERT INTO Profile
            (implode(', ', $array_keys(Matrix[0])))
    VALUES
        foreach ($Matrix as $Row){
            (implode(', ', $array_values($Row))),
        }
    ;
    
Matrix: structure with key-value pairs, passed by JSON
    ex. AlgCat
    "Matrix":[
    {"IdAlgCat":"1","IdAlgCatPar":null,"Nam":"Clean","Descr":"Clean Algs"},
    {"IdAlgCat":"2","IdAlgCatPar":1,"Nam":"aaa","Descr":"aaa Algs"},
    {"IdAlgCat":"3","IdAlgCatPar":null,"Nam":"bbb","Descr":"bbb Algs"},
    {"IdAlgCat":"4","IdAlgCatPar":4,"Nam":"ccc","Descr":"ccc Algs"},
    {"IdAlgCat":"5","IdAlgCatPar":null,"Nam":"ddd","Descr":"ddd Algs"},
    {"IdAlgCat":"6","IdAlgCatPar":6,"Nam":"eee","Descr":"eee Algs"},
    {"IdAlgCat":"7","IdAlgCatPar":null,"Nam":"fff","Descr":"fff Algs"}
    ]


----------------------------------------------------------
UPDATE examples: 
----------------------------------------------------------


Single row syntax
    UPDATE
        Profile
    SET
        Nam="   .VN($this->Nam) . ",
        Descr=" .VN($this->Descr) . "
    WHERE
        IdProfile='" . $this->IdProfile . "'

Multi rows syntax
    INSERT INTO Profile
            (implode(', ', $array_keys(Matrix[0])))
    VALUES
        foreach ($Matrix as $Row){
            (implode(', ', $array_values($Row))),
        }
    ON DUPLICATE KEY UPDATE
        implode(', ', $array_keys(Matrix[0])
    ;
---------------------------------------------------------------
!!! IMPORTANT: with this last syntax it is possible to generalize INSERT and UPDATE Ops

---------------------------------------------------------------
GENERALIZED INSERT/UPDATE
---------------------------------------------------------------
- considering the 
    - Comma Separated Fields List
        - [CSFL] = implode(', ', array_slice($array_keys(Matrix[0]), 1));
    - Comma Separated Values List
        - [CSVL] = implode(', ', array_slice($array_values(Matrix[0]), 1));
    - Comma Separated List for UPDATE
        - [CSKLIU] = implode(',',array_map(function ($v, $k) { return $k.'=VALUES('.$k.')'; }, Matrix[0], array_keys(Matrix[0]))),"<br>";

    INSERT INTO [Fundamental Entity]
            ([CSFL])
    VALUES
        foreach ($Matrix as $Row){
            ([CSVL]),
        }
    ON DUPLICATE KEY UPDATE
        [CSLU]
    ;

- SAMPLE in Test db:
    - INSERTED rows have null idT1
    - UPDATED rows have an existing idT1

    INSERT INTO t1 (idT1, nam, descr) VALUES
        (1, '-Linear regression', 'Linear regression'),
        (null , 'nanomalies auto clean', 'alg with compulsory fields'),
        (3, '-Clean', 'Clean'),
        (null , 'nStruct', 'Struct'),
        (null , 'nCompare Train Test', 'Compare Train Test '),
        (6, '-Compare', 'Compare'),
        (null , 'nPolinomial Regression', 'null'),
        (8, '-Logistic Regression', 'Logistic Regression')
    ON DUPLICATE KEY UPDATE
        idT1=VALUES(idT1), nam=VALUES(nam), descr=VALUES(descr)
;        

---------------------------------------------------------------
Data Structure knowledge extraction
---------------------------------------------------------------
- From Functional form: ex for Alg entity:
    - alg(idAlg,idAlgState,idAlgCat,nam,descr,fileRefProc,CatTag)
    - algcat(idAlgCat,idAlgCatPar,nam,descr)
    - ...
- it could be formatted as csv file:
    - conventions:
        - Descriptive Entities Id: '>' postfix or 'Par>' for recursive entities
        - Fundamental Entity Id: 'Id'+[Fundamental Entity]

    -----------         ------------------------
    Entity              Fields
    -----------         ------------------------
    alg                 idAlg,idAlgState>,idAlgCat>,nam,descr,fileRefProc,CatTag
    algcat              idAlgCat,idAlgCatPar>,nam,descr
    ...
- could be usefull to extract metadata and organize them as csv or json or rdbms tables,
    FROM:
    - rdbms metadata of existing db: ex. mysql db
    - rdbms SQL script
    - text docs (to specify)

----------------------------------------------------------
----------------------------------------------------------
DELETE examples: 
----------------------------------------------------------
    Delete			Delete		[Single]
                    Clean		[Filter]
                    Truncate	[All]
----------------------------------------------------------
Single row syntax
    DELETE from Profile p
        WHERE p.IdProfile = '" . $this->IdProfile . "'

Multi row syntax
    DELETE from Profile p
        WHERE p.IdProfile IN ('1,3,6,9,22,456')

Clean Tables
    TRUNCATE TABLE Profile
---------------------------------------------------------------
GENERALIZED DELETE
---------------------------------------------------------------
- considering the 
    - Comma Separated Delete IDS 
        - [CSDI] = implode(', ', array_slice($array_keys(Matrix[0]), 1));

    DELETE from [Fundamental Entity] fe
        WHERE fe.[Fundamental Entity] IN ([CSDI])
    
    and
    
    TRUNCATE TABLE [Fundamental Entity]
---------------------------------------------------------------
CONCLUSIONS
---------------------------------------------------------------
- With this generalization it is possible to have:
    - 1 DAO component class with generalized code;
    - a Knowledge base of:
        - DB>Tables>Fields nanomalies;
        - this Knowledge base could be extracted directly from the DB Script (ex- dadbv01.sql);
    - DAO extensions ONLY if necessary, for special queries;
- Dev Process changes accordingly:
    - REQUISITES: knowledge definition:
        - define App basic attributes: 
            - Name, title, descr, url, logo, ...
            - frameworks for 
                - UI: ex. Adminlte, bootstrap, JS, JQuery; 
                - comms: Ajax, Json, Post;
                - websrv: PHP
                - persistence: 
                    - RDBMS(MariaDb MySql) 
                    - FS(folder tree; file std nams and types)
            - UIExperience:
                - main layout, ex. 
                - std l&f, 
                - std UI components (ex. label, input, select, check, DataTable, ...)
        - define Process Lines/panels: ex. da.navigation.js >> Algs
            - for each panel, 
                - attributes: ex. type, mode, parentPanels, DetailPanels, Refs , ...
                - define Entities functional form:
                    - Fundamental: ex. Alg 
                    - Descriptive: ex. Algcat, AlgState 
        - Save them all in a prj file and/or in RDBMS structure.
    - CODING: automatic code generation:
        - Generate final code for each architecture level, choosing: code generalization level (none: no generalization; entity functional form; ...)
        - Deploy in a testing env, Test and recycle.
        - deploy in prodution env, final test and recycle.



        
       
        
    
